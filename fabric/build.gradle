plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "ParchmentMC"
                url = "https://maven.parchmentmc.org"
            }
        }
        filter {
            includeGroupAndSubgroups("org.parchmentmc")
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings(loom.layered {
        it.officialMojangMappings()
        it.parchment("org.parchmentmc.data:parchment-${project.parchment_minecraft_version}:${project.parchment_mappings_version}@zip")
    })
    compileOnly(project(":common")) {
        transitive = false
    }

    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    modCompileOnly("maven.modrinth:modmenu:${rootProject.mod_menu}") {
        transitive = false
    }
    modRuntimeOnly("maven.modrinth:modmenu:${rootProject.mod_menu}") {
        transitive = false
    }
}

loom {
    mods {
        "${mod_id}" {
            // Tell Loom about each source set used by your mod here. This ensures that your mod's classes are properly transformed by Loader.
            sourceSet sourceSets.main
            sourceSet project(":common").sourceSets.main
        }
    }

    def awFile = project.file("src/main/resources/${mod_id}.accesswidener")
    if (awFile.exists()) {
        accessWidenerPath.set(awFile)
    }

    mixin {
        useLegacyMixinAp = false
    }
}

tasks.named("compileJava", JavaCompile) {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("javadoc", Javadoc).configure {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}